/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 Vlad Martynenko <vladimir.martynenko.work@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { Component, NgZone, ElementRef } from '@angular/core';
import { BaseGauge } from './base-gauge';
import * as CanvasGauges from 'canvas-gauges';
/**
 * Implements Linear Gauge from the original library
 */
var LinearGauge = /** @class */ (function (_super) {
    tslib_1.__extends(LinearGauge, _super);
    function LinearGauge(el, zone) {
        return _super.call(this, el, zone) || this;
    }
    /**
     * @return {?}
     */
    LinearGauge.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.gauge = new CanvasGauges.LinearGauge(this.options).draw();
    };
    LinearGauge.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'linear-gauge',
                    template: '<canvas #gauge></canvas>'
                }] }
    ];
    /** @nocollapse */
    LinearGauge.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    return LinearGauge;
}(BaseGauge));
export { LinearGauge };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZWFyLWdhdWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2FudmFzLWdhdWdlcy8iLCJzb3VyY2VzIjpbImxpYi9saW5lYXItZ2F1Z2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEtBQUssWUFBWSxNQUFNLGVBQWUsQ0FBQzs7OztBQU85QztJQU1pQyx1Q0FBb0U7SUFFakcscUJBQVksRUFBYyxFQUFFLElBQVk7ZUFDcEMsa0JBQU0sRUFBRSxFQUFFLElBQUksQ0FBQztJQUNuQixDQUFDOzs7O0lBR0QsOEJBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25FLENBQUM7O2dCQWZKLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSwwQkFBMEI7aUJBQ3ZDOzs7O2dCQWIwQixVQUFVO2dCQUFsQixNQUFNOztJQXlCekIsa0JBQUM7Q0FBQSxBQWhCRCxDQU1pQyxTQUFTLEdBVXpDO1NBVlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE3IFZsYWQgTWFydHluZW5rbyA8dmxhZGltaXIubWFydHluZW5rby53b3JrQGdtYWlsLmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCB7Q29tcG9uZW50LCBOZ1pvbmUsIEVsZW1lbnRSZWYsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Jhc2VHYXVnZX0gZnJvbSAnLi9iYXNlLWdhdWdlJztcbmltcG9ydCAqIGFzIENhbnZhc0dhdWdlcyBmcm9tICdjYW52YXMtZ2F1Z2VzJztcblxuZXhwb3J0IHsgTGluZWFyR2F1Z2VPcHRpb25zIH0gZnJvbSAnY2FudmFzLWdhdWdlcyc7XG5cbi8qKlxuICogSW1wbGVtZW50cyBMaW5lYXIgR2F1Z2UgZnJvbSB0aGUgb3JpZ2luYWwgbGlicmFyeVxuICovXG5AQ29tcG9uZW50KHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdsaW5lYXItZ2F1Z2UnLFxuICAgIHRlbXBsYXRlOiAnPGNhbnZhcyAjZ2F1Z2U+PC9jYW52YXM+J1xufSlcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtY2xhc3Mtc3VmZml4XG5leHBvcnQgY2xhc3MgTGluZWFyR2F1Z2UgZXh0ZW5kcyBCYXNlR2F1Z2U8Q2FudmFzR2F1Z2VzLkxpbmVhckdhdWdlLCBDYW52YXNHYXVnZXMuTGluZWFyR2F1Z2VPcHRpb25zPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgem9uZTogTmdab25lKSB7XG4gICAgICAgIHN1cGVyKGVsLCB6b25lKTtcbiAgICB9XG5cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmdhdWdlID0gbmV3IENhbnZhc0dhdWdlcy5MaW5lYXJHYXVnZSh0aGlzLm9wdGlvbnMpLmRyYXcoKTtcbiAgICB9XG59XG4iXX0=