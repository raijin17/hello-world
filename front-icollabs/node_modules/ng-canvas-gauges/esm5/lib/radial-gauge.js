/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 Vlad Martynenko <vladimir.martynenko.work@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { Component, NgZone, ElementRef } from '@angular/core';
import { BaseGauge } from './base-gauge';
import * as CanvasGauges from 'canvas-gauges';
/**
 * Implements Radial Gauge from the original library
 */
var RadialGauge = /** @class */ (function (_super) {
    tslib_1.__extends(RadialGauge, _super);
    function RadialGauge(el, zone) {
        return _super.call(this, el, zone) || this;
    }
    /**
     * @return {?}
     */
    RadialGauge.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.gauge = new CanvasGauges.RadialGauge(this.options).draw();
    };
    RadialGauge.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'radial-gauge',
                    template: '<canvas #gauge></canvas>'
                }] }
    ];
    /** @nocollapse */
    RadialGauge.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    return RadialGauge;
}(BaseGauge));
export { RadialGauge };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaWFsLWdhdWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2FudmFzLWdhdWdlcy8iLCJzb3VyY2VzIjpbImxpYi9yYWRpYWwtZ2F1Z2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEtBQUssWUFBWSxNQUFNLGVBQWUsQ0FBQzs7OztBQU85QztJQU1pQyx1Q0FBb0U7SUFDakcscUJBQVksRUFBYyxFQUFFLElBQVk7ZUFDcEMsa0JBQU0sRUFBRSxFQUFFLElBQUksQ0FBQztJQUNuQixDQUFDOzs7O0lBRUQsOEJBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25FLENBQUM7O2dCQWJKLFNBQVMsU0FBQzs7b0JBRVAsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFFBQVEsRUFBRSwwQkFBMEI7aUJBQ3ZDOzs7O2dCQWIyQixVQUFVO2dCQUFsQixNQUFNOztJQXVCMUIsa0JBQUM7Q0FBQSxBQWRELENBTWlDLFNBQVMsR0FRekM7U0FSWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVmxhZCBNYXJ0eW5lbmtvIDx2bGFkaW1pci5tYXJ0eW5lbmtvLndvcmtAZ21haWwuY29tPlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBOZ1pvbmUsIEVsZW1lbnRSZWYsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZUdhdWdlIH0gZnJvbSAnLi9iYXNlLWdhdWdlJztcbmltcG9ydCAqIGFzIENhbnZhc0dhdWdlcyBmcm9tICdjYW52YXMtZ2F1Z2VzJztcblxuZXhwb3J0IHsgUmFkaWFsR2F1Z2VPcHRpb25zIH0gZnJvbSAnY2FudmFzLWdhdWdlcyc7XG5cbi8qKlxuICogSW1wbGVtZW50cyBSYWRpYWwgR2F1Z2UgZnJvbSB0aGUgb3JpZ2luYWwgbGlicmFyeVxuICovXG5AQ29tcG9uZW50KHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdyYWRpYWwtZ2F1Z2UnLFxuICAgIHRlbXBsYXRlOiAnPGNhbnZhcyAjZ2F1Z2U+PC9jYW52YXM+J1xufSlcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtY2xhc3Mtc3VmZml4XG5leHBvcnQgY2xhc3MgUmFkaWFsR2F1Z2UgZXh0ZW5kcyBCYXNlR2F1Z2U8Q2FudmFzR2F1Z2VzLlJhZGlhbEdhdWdlLCBDYW52YXNHYXVnZXMuUmFkaWFsR2F1Z2VPcHRpb25zPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHpvbmU6IE5nWm9uZSkge1xuICAgICAgICBzdXBlcihlbCwgem9uZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuZ2F1Z2UgPSBuZXcgQ2FudmFzR2F1Z2VzLlJhZGlhbEdhdWdlKHRoaXMub3B0aW9ucykuZHJhdygpO1xuICAgIH1cbn1cbiJdfQ==