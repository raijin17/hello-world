{"version":3,"file":"ng-canvas-gauges.js.map","sources":["ng://ng-canvas-gauges/lib/base-gauge.ts","ng://ng-canvas-gauges/lib/linear-gauge.ts","ng://ng-canvas-gauges/lib/radial-gauge.ts","ng://ng-canvas-gauges/lib/gauges.module.ts"],"sourcesContent":["/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Vlad Martynenko <vladimir.martynenko.work@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { ViewChild, Input, NgZone, ElementRef, OnInit, AfterViewInit } from '@angular/core';\nimport * as CanvasGauges from 'canvas-gauges';\nimport * as Rx from 'rx-dom-html';\n\n\n\n// String utils\nconst toCamelCase = (str: string) => str.replace(/(\\-\\w)/g, (matches) => matches[1].toUpperCase());\n\nconst toKebabCase = (str: string) => str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\nconst attributeName2PropertyName = (attrName: string) => toCamelCase(attrName);\n\n\n\n\n/**\n * Base gauge component for the Gauges rendering\n * T - Type of the Gauge to be rendered (Currently RadialGauge, LinearGauge from the original library)\n * T2 - Type of config options used by the particular gauge (RadialGaugeOptions, LinearGaugeOptions)\n */\nexport abstract class BaseGauge<T extends CanvasGauges.BaseGauge, T2 extends CanvasGauges.GenericOptions>\n    implements OnInit, AfterViewInit {\n\n    /**\n     * Canvas element on the template used by the library to draw gauge element\n     */\n    @ViewChild('gauge')\n    protected canvas: ElementRef;\n\n    /**\n     * A gauge instance responsible for rendering and updates on the canvas.\n     * Subclasses should initialize in their ngOnInit implementation.\n     */\n    protected gauge: T;\n\n\n    /**\n     * Flag indicating that OnViewInit life-cycle has completed\n     */\n    private isInited = false;\n\n    /**\n     * value property of gauge prior to component view initialization\n     */\n    private preInitValue: number;\n\n    /**\n     * options property of gauge prior to component view initialization\n     */\n    private preInitOptions: T2;\n\n\n    /**\n     * Listen for attribute changes, i.e., options properties that are stored\n     * as attributes on this ElementRef\n     */\n    private domListener: MutationObserver;\n\n\n    /**\n     *\n     * @param el - reference to the element of the whole component, used to scrape options declared on the component itself\n     * @param zone - required to redraw gauge outside of Angular, due to animation lags caused by the ovewritten function of the ngZone\n     */\n    constructor(private el: ElementRef, public zone: NgZone) {\n    }\n\n\n    /**\n     * Subclasses should instantiate the CanvasGauge object in the child component\n     */\n    abstract ngOnInit(): void;\n\n\n    /**\n     * Returns gauges properties as an options object.\n     * Option properties consist of the attribute-based properties and those\n     * explicitly set.\n     * @returns <T2>\n     */\n    public get options(): T2 {\n\n        const options = {} as T2;\n        options.renderTo = this.canvas.nativeElement;\n\n        // Map attribute-based options onto options.\n        // Requries converting kebab style attribute names to camelCase property names\n        for (const attr of this.el.nativeElement.attributes) {\n            const prop = attributeName2PropertyName(attr.name);\n            options[prop] = CanvasGauges.DomObserver.parse(attr.value);\n        }\n\n        // merge preOptons with attribute-based properties\n        // tslint:disable-next-line:forin\n        for (const prop in this.preInitOptions) {\n            options[prop] = this.preInitOptions[prop];\n        }\n\n        // clear the preInitOptions as they have already been merged\n        // with the attribute-based properties\n        if (this.isInited) {\n            this.preInitOptions = null;\n        }\n\n        return options;\n    }\n\n\n    /**\n     * Assign gauge options at anytime in the lifecycle.\n     * @param newOptions - assign the style and size properties\n     */\n    @Input()\n    public set options(newOptions: T2) {\n\n        // cache newOptions as preInitOptions until gauge is ready\n        if (!this.isInited) {\n            this.preInitOptions = newOptions;\n            return;\n        }\n\n        this.update(newOptions);\n    }\n\n\n    /**\n     * Assign the value of the gauge visual indicator such as a needle or pointer\n     * @param newValue  the guage new value\n     */\n    @Input()\n    public set value(newValue: number) {\n\n        // case new gauge value as preInitValue until the gauge is ready\n        if (!this.isInited) {\n            this.preInitValue = newValue;\n            return;\n        }\n\n        this.zone.runOutsideAngular(() => {\n            this.gauge.value = newValue;\n        });\n    }\n\n\n    /**\n     * Update the gauge options. Do not use until after OnViewInit() before using.\n     *\n     * Special implementation note - options.properties are maintained as\n     * attribute name->value on this component's elementRef.  Thus this method\n     * maps each newOptions property onto the property's corresponding attribute.\n     * The attribute update triggers a DOM mutation event which  \"this\" listens for.\n     * See #listenForDOMEvents()\n     *\n     * @param newOptions  - the options to update the gauge\n     */\n    public update(newOptions: T2 | {}) {\n\n        // map all options onto this element's attributes\n        // Then attribute changes will be detected and pushed to the gauge.update()\n        if (!newOptions) { return; }\n\n        // tslint:disable-next-line:forin\n        for (const prop in newOptions) {\n            const val = newOptions[prop].toString();\n\n            if (prop === 'value') {\n                // short circuit the value property update by calling\n                // the gauge.value api directly for efficient animated update\n                this.value = CanvasGauges.DomObserver.parse(val);\n            } else {\n                const attrName = toKebabCase(prop);\n                this.el.nativeElement.setAttribute(attrName, val);\n            }\n        }\n    }\n\n\n    /**\n     * Perform gauge initialization.\n     * Subclasses that override this method must this super version\n     * for proper operation.\n     */\n    public ngAfterViewInit() {\n\n        // initial update of gauge properties\n        this.initGauge();\n\n        this.listenForDOMEvents();\n\n        this.isInited = true;\n    }\n\n\n    /**\n     * Listen for attribute-change events that are created when updating\n     * the options of this gauge.\n     */\n    protected listenForDOMEvents() {\n        // Listen to gauge element for attribute changes\n        // Convert all changed attribtues into a GenericOptions or subclass\n        // Update the gauge with the new options.\n        this.domListener =\n            Rx.DOM.fromMutationObserver(this.el.nativeElement, { attributes: true }).\n                subscribe(changes => {\n                    const newOptions = {} as T2;\n                    changes.forEach(change => {\n                        if ('attributes' === change.type) {\n                            // console.log('DOM, change', change.attributeName);\n                            newOptions[attributeName2PropertyName(change.attributeName)] =\n                                CanvasGauges.DomObserver.parse(\n                                    this.el.nativeElement.getAttribute(change.attributeName));\n                        }\n                    });\n\n                    this.basicUpdate(newOptions);\n                });\n    }\n\n\n    /**\n     * Discontinue listening for attribute change events.\n     */\n    protected stopListeningForDOMEvents() {\n        if (this.domListener) {\n            this.domListener.disconnect();\n            this.domListener = null;\n        }\n    }\n\n\n    /**\n     * Initalize the gauge with all options defined by attributes and\n     * parent component options.\n     */\n    protected initGauge() {\n        const options = this.options;\n        if (this.preInitValue) {\n            options.value = this.preInitValue;\n        }\n\n        // init options.renderTo if needed\n        if (!options.hasOwnProperty('renderTo') || !options.renderTo) {\n            options.renderTo = this.canvas.nativeElement;\n        }\n\n        this.basicUpdate(options);\n    }\n\n\n    /**\n     * Performs the gauge update using the current options\n     * @param options  The options for the guage\n     */\n    protected basicUpdate(options: T2) {\n\n        // treat the value property special and update it through the\n        // value getter.\n        if (typeof options.value === 'number') {\n\n            // use gauge api directly for most efficient update method\n            this.value = options.value;\n\n            // filter value property from options to avoid redundant\n            // processing by gauge\n            delete options.value;\n        }\n\n        // do nothing if no option properties to update\n        if (Object.keys(options).length) {\n            this.gauge.update(options);\n        }\n    }\n\n}\n\n\n\n","/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Vlad Martynenko <vladimir.martynenko.work@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {Component, NgZone, ElementRef, OnInit} from '@angular/core';\nimport {BaseGauge} from './base-gauge';\nimport * as CanvasGauges from 'canvas-gauges';\n\nexport { LinearGaugeOptions } from 'canvas-gauges';\n\n/**\n * Implements Linear Gauge from the original library\n */\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'linear-gauge',\n    template: '<canvas #gauge></canvas>'\n})\n// tslint:disable-next-line:component-class-suffix\nexport class LinearGauge extends BaseGauge<CanvasGauges.LinearGauge, CanvasGauges.LinearGaugeOptions> implements OnInit {\n\n    constructor(el: ElementRef, zone: NgZone) {\n        super(el, zone);\n    }\n\n\n    ngOnInit(): void {\n        this.gauge = new CanvasGauges.LinearGauge(this.options).draw();\n    }\n}\n","/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Vlad Martynenko <vladimir.martynenko.work@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Component, NgZone, ElementRef, OnInit } from '@angular/core';\nimport { BaseGauge } from './base-gauge';\nimport * as CanvasGauges from 'canvas-gauges';\n\nexport { RadialGaugeOptions } from 'canvas-gauges';\n\n/**\n * Implements Radial Gauge from the original library\n */\n@Component({\n    // tslint:disable-next-line:component-selector\n    selector: 'radial-gauge',\n    template: '<canvas #gauge></canvas>'\n})\n// tslint:disable-next-line:component-class-suffix\nexport class RadialGauge extends BaseGauge<CanvasGauges.RadialGauge, CanvasGauges.RadialGaugeOptions> implements OnInit {\n    constructor(el: ElementRef, zone: NgZone) {\n        super(el, zone);\n    }\n\n    ngOnInit() {\n        this.gauge = new CanvasGauges.RadialGauge(this.options).draw();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { LinearGauge } from './linear-gauge';\nimport { RadialGauge } from './radial-gauge';\n\n@NgModule({\n  declarations: [\n    LinearGauge,\n    RadialGauge],\n  imports: [\n  ],\n  exports: [\n    LinearGauge,\n    RadialGauge]\n})\nexport class GaugesModule { }\n"],"names":["tslib_1.__values","CanvasGauges.DomObserver","Rx.DOM","tslib_1.__extends","LinearGauge","CanvasGauges.LinearGauge","RadialGauge","CanvasGauges.RadialGauge"],"mappings":"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"}
